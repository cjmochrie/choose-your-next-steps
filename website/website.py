import os
import re
import jinja2
import webapp2
import cgi
import datetime

from google.appengine.ext import ndb
from google.appengine.api import users



template_dir = os.path.join(os.path.dirname(__file__), 'templates')
jinja_env = jinja2.Environment(loader = jinja2.FileSystemLoader(template_dir),
	autoescape = True)



def get_concept_by_number(text, concept_number): #I implemented this differently from the class as a challenge. Not as elegant but more explicit what is going on I think
	count = 0
	title_start = 0
	title_end = 0
	description_start = 0
	description_end = 0
	title = ''
	description = ''

	while count < concept_number:
		count += 1
		title_start = text.find('TITLE:', description_end) #find the beginning of the title
		if title_start == -1: #if there aren't any more concepts, break from the loop and return an empty concept
			return []

		title_end = text.find('DESCRIPTION:', title_start) #find the end of the title
		description_start = text.find('DESCRIPTION:', description_end) #find the beginning of the description
		description_end = text.find('TITLE:', description_start + 12) #find the end of the description

		title = text[title_start + 6:title_end] #grab the title

		if description_end != -1: #grab the description - if at the end of the text make sure to grab the last character
			description = text[description_start + 12:description_end]
		else:
			description = text[description_start + 12:]

	return [title, description]

def parseText(raw_text):
	current_concept_number = 1
	all_concepts = [] #creat a list to hold the concepts
	concept = get_concept_by_number(raw_text, current_concept_number) #a concept is a two element list with the title and description

	while concept: #grab all the concepts in the text and append to the all_concept list
		all_concepts.append(concept)
		current_concept_number += 1
		concept = get_concept_by_number(raw_text, current_concept_number)

	return all_concepts

def getTextDataFromFile(fileName): #This function writes the text file to a string and returns it
	theData = ''
	with open(fileName, "r") as txt:
		for line in txt:
			theData = theData + line

	theData = theData.replace("\n", "") #get rid of new lines
	return theData

class Handler(webapp2.RequestHandler):
	def write(self, *a, **kw):
		self.response.out.write(*a, **kw)

	#takes filename and parameters, creates file with template
	def render_str(self, template, **params):
		t = jinja_env.get_template(template)
		return t.render(params)

	def render(self, template, **kw):
		self.write(self.render_str(template, **kw))

#Main homepage handler
class MainPage(Handler):
	def get(self):
		self.render('main_page_template.html')

#handler for rendering premade notes
class ClassNotes(Handler):
	def get(self):
		self.render('class_notes_template.html')

#handler for rendering on-the-fly generated notes
class AutoGenerated(Handler):
	def get(self):
		#get the raw text we want to convert to HTML
		raw_text = getTextDataFromFile("concepts.txt")
		#convert the raw text to structured data
		concepts = parseText(raw_text)
		#render the page passing in concepts
		self.render('unit_page_template.html', concepts = concepts)


baseball_key = ndb.Key('Baseball', 'default_baseball')

#Player Class for storing baseball player data
class Player(ndb.Model):
	name = ndb.StringProperty()
	plate_appearances = ndb.IntegerProperty()
	hits = ndb.IntegerProperty()
	walks = ndb.IntegerProperty()
	batting_average = ndb.FloatProperty()
	on_base_percentage = ndb.FloatProperty()


#Handler for the Baseball Player database
class Baseball(Handler):
	#method for rendering the player database
	def get(self, error_msg=""):

		valid_sort_style = ['name', 'plate_appearances', 'hits', 'walks', 'batting_average', 'on_base_percentage']

		#get the sort parameter from the URL and sort the player list appropriately. Default is sorted by order entered.
		sort_style = self.request.get('sort_style')

		if sort_style and sort_style in valid_sort_style:
			players = ndb.gql('SELECT * ' 'FROM Player ' 'WHERE ANCESTOR IS :1 ' 'ORDER BY %s DESC' %sort_style, baseball_key)
		else:
			players = ndb.gql('SELECT * ' 'FROM Player ' 'WHERE ANCESTOR IS :1 ', baseball_key)

		#collection to be passed to jinja2 template (simply the player database)
		template_values = {
			'players': players,
			'error_msg': error_msg
		}

		#create the template object
		template = jinja_env.get_template('baseball_template.html')

		#render the template after passing in the player database
		self.response.write(template.render(template_values))

	#method for adding players to the database
	def post(self):
		player = Player(parent=baseball_key)

		#validate data and if they are invalid generate an appropriate error message
		if self.request.get('player_name') and self.request.get('plate_appearances') and self.request.get('hits') and self.request.get('walks'):
			player_name = self.request.get('player_name').strip()
			plate_appearances = int(self.request.get('plate_appearances'))
			hits = int(self.request.get('hits'))
			walks = int(self.request.get('walks'))

			if (hits + walks) > plate_appearances:
				self.get(error_msg = "Hits plus walks must be less than or equal to plate appearances")
			elif hits < 0 or walks < 0 or plate_appearances < 0:
				self.get(error_msg = "No negative numbers please")
			elif not re.search(player_name, r'[\w.\-]+$'):
				self.get(error_msg = "Invalid player name")
			else:
				player.name = player_name
				player.plate_appearances = plate_appearances
				player.hits = hits
				player.walks = walks
				player.batting_average = round(float(hits) / (float(plate_appearances) - float(walks)), 4)
				player.on_base_percentage = round((float(hits) + float(walks)) / float(plate_appearances), 4)
				player.put()
				self.get()
		else:
			self.get(error_msg = "Insufficient information added")


class Web_development(Handler):
	def get(self):
		self.render('web_development_template.html')

class Databases(Handler):
	def get(self):
		self.render('databases_template.html')

app = webapp2.WSGIApplication([('/', MainPage),
	('/class_notes', ClassNotes),
	 ('/auto_generated', AutoGenerated),
	  ('/baseball', Baseball),
	   ('/web_development', Web_development),
	   ('/databases', Databases)], debug=True)
